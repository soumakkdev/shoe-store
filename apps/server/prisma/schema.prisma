// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  email  String  @unique
  role   Role
  uid    String
  avatar String?

  addresses UserAddress[]
  orders    Order[]
  cart      Cart?
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address   String
  locality  String?
  city      String
  state     String
  zipcode   String
  country   String
  phoneNo   String
  isDefault Boolean

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  variants ProductVariant[]
}

model ProductVariant {
  id Int @id @default(autoincrement())

  color String
  price Float
  sku   String

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  images     ProductImages[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model ProductImages {
  id Int @id @default(autoincrement())

  publicId String
  url      String

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalAmount Float
  status      OrderStatus

  user   User @relation(fields: [userId], references: [id])
  userId Int

  orderItems OrderItem[]

  paymentIntentId String?
  paymentStatus   PaymentStatus?

  orderAddress   OrderAddress @relation(fields: [orderAddressId], references: [id])
  orderAddressId Int
}

model OrderAddress {
  id Int @id @default(autoincrement())

  address  String
  locality String?
  city     String
  state    String
  zipcode  String
  country  String
  phoneNo  String
  name     String

  Order Order[]
}

model OrderItem {
  id Int @id @default(autoincrement())

  quantity Int
  size     String

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model CartItem {
  id String @id @default(uuid())

  quantity Int @default(1)

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId Int
}

// enums 
enum Role {
  Admin
  Customer
}

enum OrderStatus {
  Pending
  Paid
  Shiped
  Failed
  Completed
  Canceled
}

enum PaymentStatus {
  Pending
  Succeeded
  Failed
  Refunded
}
